name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests with coverage
        run: |
          poetry run coverage run --source=. -m pytest test/
          poetry run coverage report --show-missing
          poetry run coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Run code formatting checks
        run: |
          poetry run black --check --line-length 79 parse_dns_csvs.py

      - name: Run linting
        run: |
          poetry run flake8 parse_dns_csvs.py

      - name: Run import sorting check
        run: |
          poetry run isort --check-only parse_dns_csvs.py

      - name: Run type checking
        run: |
          poetry run mypy parse_dns_csvs.py

      - name: Run security scanning with Bandit
        run: |
          poetry run bandit -r parse_dns_csvs.py

      # - name: Run dependency vulnerability scanning with Safety
      #   run: |
      #     poetry run safety scan --output screen --continue-on-error
      #   continue-on-error: true

      - name: Run dependency vulnerability scanning with pip-audit
        run: |
          poetry run pip-audit

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Run Snyk vulnerability scanning
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk auth $SNYK_TOKEN
          snyk test --severity-threshold=medium
          snyk iac test --severity-threshold=medium
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run TFLint
        run: |
          tflint --init
          tflint

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov Security Scan
        run: |
          checkov -d . --framework terraform --config-file .checkov.yml --output cli --output json --output-file-path checkov-report.json
        continue-on-error: true

      - name: Install and Run TFSec Security Scan
        run: |
          # Install TFSec
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          # Print TFSec version and path
          which tfsec
          tfsec --version
          # Run TFSec with SARIF output for GitHub integration
          tfsec . --format=sarif --out=tfsec-report.sarif --minimum-severity=MEDIUM
          # Also generate JSON report
          tfsec . --format=json --out=tfsec-report.json
          # List files in workspace to check for SARIF output
          echo "Listing files in workspace after TFSec run:"
          ls -lh
          echo "Listing tfsec-report.* files:"
          ls -lh tfsec-report.* || echo "No tfsec-report.* files found"
        continue-on-error: true

      - name: Check if TFSec SARIF file exists
        id: check-tfsec-sarif
        run: |
          if [ -f "tfsec-report.sarif" ]; then
            echo "sarif_exists=true" >> $GITHUB_OUTPUT
            echo "TFSec SARIF file found"
          else
            echo "sarif_exists=false" >> $GITHUB_OUTPUT
            echo "TFSec SARIF file not found - skipping upload"
          fi

      - name: Upload TFSec SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-tfsec-sarif.outputs.sarif_exists == 'true'
        with:
          sarif_file: tfsec-report.sarif
